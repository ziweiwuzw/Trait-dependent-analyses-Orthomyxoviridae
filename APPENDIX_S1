
################################################################################
#
# APPENDIX S1-1
# MuSSE_host_6_states
#
#
# Authors: Ziwei Wu ; Original Authors: Sebastian Hoehna, Will Freyman
#
################################################################################

#######################
# Reading in the Data #
#######################


NUM_STATES = 6
DATASET = "phylum_0-5"

### Read in the data
observed_phylogeny <- readTrees("tutorial_structure/data/virus_midpoint.treefile.nex")[1]
data <- readCharacterData("tutorial_structure/data/virus_"+DATASET+".nex")

# Get some useful variables from the data. We need these later on.
taxa <- observed_phylogeny.taxa()


# Create some vector for the moves and monitors of this analysis
moves    = VectorMoves()
monitors = VectorMonitors()


H = 0.587405




####################
# Create the rates #
####################

### Specify a prior on the diversification and turnover rate

for (i in 1:NUM_STATES) {

     ### Create a loguniform distributed variable for the diversification rate
    speciation[i] ~ dnLoguniform( 1E-6, 1E2)
    speciation[i].setValue( ln(150.0/2.0) / observed_phylogeny.rootAge() )
    moves.append( mvScale(speciation[i],lambda=0.20,tune=true,weight=3.0) )

    ### Create a loguniform distributed variable for the turnover rate
    extinction[i] ~ dnLoguniform( 1E-6, 1E2)
    extinction[i].setValue( speciation[i]/10.0 )
    moves.append( mvScale(extinction[i],lambda=0.20,tune=true,weight=3.0) )

    diversification[i] := speciation[i] - extinction[i]

}


#########################################################
# Set up the transition rate matrix for observed states #
#########################################################

# Each transition rate between observed states are drawn
# from an exponential distribution with a mean of 10
# character state transitions over the tree.
rate_pr := observed_phylogeny.treeLength() / 10
for ( i in 1:(NUM_STATES*(NUM_STATES-1)) ) {
    transition_rates[i] ~ dnExp(rate_pr)
    moves.append( mvScale(transition_rates[i],lambda=0.20,tune=true,weight=3.0) )
}



######################################################################
# Create the rate matrix for the combined observed and hidden states #
######################################################################
rate_matrix := fnFreeK( transition_rates, rescaled=false)


#####################################
# Set up the root state frequencies #
#####################################

### Create a constant variable with the prior probabilities of each rate category at the root.
rate_category_prior ~ dnDirichlet( rep(1,NUM_STATES) )
moves.append( mvDirichletSimplex(rate_category_prior,tune=true,weight=2) )


### Create the fix parameter for the age of the root set to the observed age
root <- observed_phylogeny.rootAge()


### rho is the probability of sampling species at the present
### fix this to 85/150
rho <- observed_phylogeny.ntips()/150


#### construct a variable for the tree drawn from a birth death process
timetree ~ dnCDBDP( rootAge           = root,
                    speciationRates   = speciation,
                    extinctionRates   = extinction,
                    Q                 = rate_matrix,
                    pi                = rate_category_prior,
                    delta             = 1.0,
                    rho               = rho,
                    condition         = "time")

### clamp the model with the "observed" tree
timetree.clamp( observed_phylogeny )
timetree.clampCharData( data )



#############
# The Model #
#############


### workspace model wrapper ###
mymodel = model(rate_matrix)

### set up the monitors that will output parameter values to file and screen
monitors.append( mnModel(filename="output/virus_BiSSE_"+DATASET+".log", printgen=1) )
monitors.append( mnJointConditionalAncestralState(tree=timetree, cdbdp=timetree, type="Standard", printgen=1, withTips=true, withStartStates=false, filename="output/virus_BiSSE_"+DATASET+"_anc_states.log") )
monitors.append( mnStochasticCharacterMap(cdbdp=timetree, filename="output/virus_BiSSE_"+DATASET+"_stoch_map.log", printgen=1) )
monitors.append( mnScreen(printgen=10, speciation, extinction) )


################
# The Analysis #
################

### workspace mcmc
mymcmc = mcmc(mymodel, monitors, moves, nruns=2, moveschedule="random", combine="mixed")

### run the MCMC
mymcmc.run(generations=10000, tuningInterval=200)



##############################
# Summarize ancestral states #
##############################


anc_states = readAncestralStateTrace("output/virus_BiSSE_"+DATASET+"_anc_states.log")
anc_tree = ancestralStateTree(tree=observed_phylogeny,
                              ancestral_state_trace_vector=anc_states,
                              include_start_states=false,
                              file="output/virus_BiSSE_"+DATASET+"_anc_states_results.tree",
                              burnin=0.1,
                              summary_statistic="MAP",
                              site=1)


anc_state_trace = readAncestralStateTrace("output/virus_BiSSE_"+DATASET+"_stoch_map.log")
characterMapTree(observed_phylogeny,
                 anc_state_trace,
                 character_file="output/virus_BiSSE_"+DATASET+"_stoch_map_character.tree",
                 posterior_file="output/virus_BiSSE_"+DATASET+"_stoch_map_posterior.tree",
                 burnin=0.1,
                 reconstruction="marginal")

q()

################################################################################
#
# APPENDIX S2-2
# MuSSE_host_4_states
#
#
# Authors: Ziwei Wu ; Original Authors: Sebastian Hoehna, Will Freyman
#
################################################################################

#######################
# Reading in the Data #
#######################


NUM_STATES = 4
DATASET = "new_phylum"

### Read in the data
observed_phylogeny <- readTrees("tutorial_structure/data/virus_new_midpoint.treefile.nex")[1]
data <- readCharacterData("tutorial_structure/data/virus_"+DATASET+".nex")

# Get some useful variables from the data. We need these later on.
taxa <- observed_phylogeny.taxa()


# Create some vector for the moves and monitors of this analysis
moves    = VectorMoves()
monitors = VectorMonitors()


H = 0.587405




####################
# Create the rates #
####################

### Specify a prior on the diversification and turnover rate

for (i in 1:NUM_STATES) {

     ### Create a loguniform distributed variable for the diversification rate
    speciation[i] ~ dnLoguniform( 1E-6, 1E2)
    speciation[i].setValue( ln(150.0/2.0) / observed_phylogeny.rootAge() )
    moves.append( mvScale(speciation[i],lambda=0.20,tune=true,weight=3.0) )

    ### Create a loguniform distributed variable for the turnover rate
    extinction[i] ~ dnLoguniform( 1E-6, 1E2)
    extinction[i].setValue( speciation[i]/10.0 )
    moves.append( mvScale(extinction[i],lambda=0.20,tune=true,weight=3.0) )

    diversification[i] := speciation[i] - extinction[i]

}


#########################################################
# Set up the transition rate matrix for observed states #
#########################################################

# Each transition rate between observed states are drawn
# from an exponential distribution with a mean of 10
# character state transitions over the tree.
rate_pr := observed_phylogeny.treeLength() / 10
for ( i in 1:(NUM_STATES*(NUM_STATES-1)) ) {
    transition_rates[i] ~ dnExp(rate_pr)
    moves.append( mvScale(transition_rates[i],lambda=0.20,tune=true,weight=3.0) )
}



######################################################################
# Create the rate matrix for the combined observed and hidden states #
######################################################################
rate_matrix := fnFreeK( transition_rates, rescaled=false)


#####################################
# Set up the root state frequencies #
#####################################

### Create a constant variable with the prior probabilities of each rate category at the root.
rate_category_prior ~ dnDirichlet( rep(1,NUM_STATES) )
moves.append( mvDirichletSimplex(rate_category_prior,tune=true,weight=2) )


### Create the fix parameter for the age of the root set to the observed age
root <- observed_phylogeny.rootAge()


### rho is the probability of sampling species at the present
### fix this to 85/150
rho <- observed_phylogeny.ntips()/150


#### construct a variable for the tree drawn from a birth death process
timetree ~ dnCDBDP( rootAge           = root,
                    speciationRates   = speciation,
                    extinctionRates   = extinction,
                    Q                 = rate_matrix,
                    pi                = rate_category_prior,
                    delta             = 1.0,
                    rho               = rho,
                    condition         = "time")

### clamp the model with the "observed" tree
timetree.clamp( observed_phylogeny )
timetree.clampCharData( data )



#############
# The Model #
#############


### workspace model wrapper ###
mymodel = model(rate_matrix)

### set up the monitors that will output parameter values to file and screen
monitors.append( mnModel(filename="output/virus_BiSSE_"+DATASET+".log", printgen=1) )
monitors.append( mnJointConditionalAncestralState(tree=timetree, cdbdp=timetree, type="Standard", printgen=1, withTips=true, withStartStates=false, filename="output/virus_BiSSE_"+DATASET+"_anc_states.log") )
monitors.append( mnStochasticCharacterMap(cdbdp=timetree, filename="output/virus_BiSSE_"+DATASET+"_stoch_map.log", printgen=1) )
monitors.append( mnScreen(printgen=10, speciation, extinction) )


################
# The Analysis #
################

### workspace mcmc
mymcmc = mcmc(mymodel, monitors, moves, nruns=2, moveschedule="random", combine="mixed")

### run the MCMC
mymcmc.run(generations=10000, tuningInterval=200)



##############################
# Summarize ancestral states #
##############################


anc_states = readAncestralStateTrace("output/virus_BiSSE_"+DATASET+"_anc_states.log")
anc_tree = ancestralStateTree(tree=observed_phylogeny,
                              ancestral_state_trace_vector=anc_states,
                              include_start_states=false,
                              file="output/virus_BiSSE_"+DATASET+"_anc_states_results.tree",
                              burnin=0.1,
                              summary_statistic="MAP",
                              site=1)


anc_state_trace = readAncestralStateTrace("output/virus_BiSSE_"+DATASET+"_stoch_map.log")
characterMapTree(observed_phylogeny,
                 anc_state_trace,
                 character_file="output/virus_BiSSE_"+DATASET+"_stoch_map_character.tree",
                 posterior_file="output/virus_BiSSE_"+DATASET+"_stoch_map_posterior.tree",
                 burnin=0.1,
                 reconstruction="marginal")

q()

################################################################################
#
# APPENDIX S2-3
# MuSSE_genus_virus
#
#
# Authors: Ziwei Wu ; Original Authors: Sebastian Hoehna, Will Freyman
#
################################################################################

#######################
# Reading in the Data #
#######################


NUM_STATES = 5
DATASET = "linkages_0-4"

### Read in the data
observed_phylogeny <- readTrees("tutorial_structure/data/virus_midpoint.treefile.nex")[1]
data <- readCharacterData("tutorial_structure/data/virus_"+DATASET+".nex")

# Get some useful variables from the data. We need these later on.
taxa <- observed_phylogeny.taxa()


# Create some vector for the moves and monitors of this analysis
moves    = VectorMoves()
monitors = VectorMonitors()


H = 0.587405




####################
# Create the rates #
####################

### Specify a prior on the diversification and turnover rate

for (i in 1:NUM_STATES) {

     ### Create a loguniform distributed variable for the diversification rate
    speciation[i] ~ dnLoguniform( 1E-6, 1E2)
    speciation[i].setValue( ln(150.0/2.0) / observed_phylogeny.rootAge() )
    moves.append( mvScale(speciation[i],lambda=0.20,tune=true,weight=3.0) )

    ### Create a loguniform distributed variable for the turnover rate
    extinction[i] ~ dnLoguniform( 1E-6, 1E2)
    extinction[i].setValue( speciation[i]/10.0 )
    moves.append( mvScale(extinction[i],lambda=0.20,tune=true,weight=3.0) )

    diversification[i] := speciation[i] - extinction[i]

}


#########################################################
# Set up the transition rate matrix for observed states #
#########################################################

# Each transition rate between observed states are drawn
# from an exponential distribution with a mean of 10
# character state transitions over the tree.
rate_pr := observed_phylogeny.treeLength() / 10
for ( i in 1:(NUM_STATES*(NUM_STATES-1)) ) {
    transition_rates[i] ~ dnExp(rate_pr)
    moves.append( mvScale(transition_rates[i],lambda=0.20,tune=true,weight=3.0) )
}



######################################################################
# Create the rate matrix for the combined observed and hidden states #
######################################################################
rate_matrix := fnFreeK( transition_rates, rescaled=false)


#####################################
# Set up the root state frequencies #
#####################################

### Create a constant variable with the prior probabilities of each rate category at the root.
rate_category_prior ~ dnDirichlet( rep(1,NUM_STATES) )
moves.append( mvDirichletSimplex(rate_category_prior,tune=true,weight=2) )


### Create the fix parameter for the age of the root set to the observed age
root <- observed_phylogeny.rootAge()


### rho is the probability of sampling species at the present
### fix this to 85/150
rho <- observed_phylogeny.ntips()/150


#### construct a variable for the tree drawn from a birth death process
timetree ~ dnCDBDP( rootAge           = root,
                    speciationRates   = speciation,
                    extinctionRates   = extinction,
                    Q                 = rate_matrix,
                    pi                = rate_category_prior,
                    delta             = 1.0,
                    rho               = rho,
                    condition         = "time")

### clamp the model with the "observed" tree
timetree.clamp( observed_phylogeny )
timetree.clampCharData( data )



#############
# The Model #
#############


### workspace model wrapper ###
mymodel = model(rate_matrix)

### set up the monitors that will output parameter values to file and screen
monitors.append( mnModel(filename="output/virus_BiSSE_"+DATASET+".log", printgen=1) )
monitors.append( mnJointConditionalAncestralState(tree=timetree, cdbdp=timetree, type="Standard", printgen=1, withTips=true, withStartStates=false, filename="output/virus_BiSSE_"+DATASET+"_anc_states.log") )
monitors.append( mnStochasticCharacterMap(cdbdp=timetree, filename="output/virus_BiSSE_"+DATASET+"_stoch_map.log", printgen=1) )
monitors.append( mnScreen(printgen=10, speciation, extinction) )


################
# The Analysis #
################

### workspace mcmc
mymcmc = mcmc(mymodel, monitors, moves, nruns=2, moveschedule="random", combine="mixed")

### run the MCMC
mymcmc.run(generations=10000, tuningInterval=200)



##############################
# Summarize ancestral states #
##############################


anc_states = readAncestralStateTrace("output/virus_BiSSE_"+DATASET+"_anc_states.log")
anc_tree = ancestralStateTree(tree=observed_phylogeny,
                              ancestral_state_trace_vector=anc_states,
                              include_start_states=false,
                              file="output/virus_BiSSE_"+DATASET+"_anc_states_results.tree",
                              burnin=0.1,
                              summary_statistic="MAP",
                              site=1)


anc_state_trace = readAncestralStateTrace("output/virus_BiSSE_"+DATASET+"_stoch_map.log")
characterMapTree(observed_phylogeny,
                 anc_state_trace,
                 character_file="output/virus_BiSSE_"+DATASET+"_stoch_map_character.tree",
                 posterior_file="output/virus_BiSSE_"+DATASET+"_stoch_map_posterior.tree",
                 burnin=0.1,
                 reconstruction="marginal")

q()

######### Model Comparisons ############################################################
# Calculate marginal likelihood using Bayes Factors and path sampling and stepping-stone

pow_p = powerPosterior(mymodel, moves, monitors, "outputPP/virus_MUSSE_linkages_0-4.out", cats=50)

pow_p.burnin(generations=10000, tuningInterval=100)  # No need if we run this immediately after mymcmc.run

pow_p.run(generations=1000)
# Note: Different filename (outputPP/output) is for record the values of ss.marginal and ps.marginal
ss = steppingStoneSampler(file="output/virus_MUSSE_linkages_0-4.out", powerColumnName="power", likelihoodColumnName="likelihood")
ss.marginal()

ps = pathSampler(file="output/virus_MUSSE_linkages_0-4.out", powerColumnName="power", likelihoodColumnName="likelihood")
ps.marginal()

# Other models test conduct the same code 
# Model comparisonwe can skip the JointAncestral CharacterState and Stochastic Mapping reconstruction
q()


